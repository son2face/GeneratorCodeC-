import 'rxjs/Rx';
import { Observable } from 'rxjs/Rx';
import { Http, Response, Headers } from '@angular/http';
import {HttpService} from "../../Shared/HttpService";
import { Injectable } from '@angular/core';
import { [MODULE]Entity } from "./[MODULE].Entity";
import { Search[MODULE]Entity } from "./[MODULE].SearchEntity";
[OBJECTPROPERTIES]
    import { [ITEM.NAME]Entity } from "../[ITEM.TYPE]/[ITEM.TYPE].Entity";
[END]
[ARRAYPROPERTIES]
    import { [ITEM.NAME]Entity } from "../[ITEM.TYPE]/[ITEM.TYPE].Entity";
[END]
@Injectable()
export class [MODULE]Service {
    public url: string;

    constructor(private Http: Http) {
        this.url = "api/[MODULES]";
    }
	
	GetData(url: string, data: any): Observable<any> {
        let http = <HttpService>this.Http;
        return http.get(url, {params: data}, false)
            .map(res => {
                return res.json();
            });
    }

    Get(Search?: Search[MODULE]Entity): Observable<any> {
        return this.Http.get(this.url, { params: Search === undefined ? null : Search.ToParams() })
            .map(res => {
                return res.json().map((item: any) => {
                    return new [MODULE]Entity(item);
                });
            });
    }

	Count(Search?: Search[MODULE]Entity): Observable<number> {
       Search = Search === undefined ? new Search[MODULE]Entity() : Search;
           return this.Http.get(this.url + "/Count", { params: Search.ToParams() })
           .map(res => {
               return res.json();
           });
    }

    GetId(Id: string): Observable<any> {
        return this.Http.get(`${this.url}/${Id}`)
            .map(res => {
                return new [MODULE]Entity(res.json());
            });
    }
    Create(data: [MODULE]Entity): Observable<any> {
        return this.Http.post(`${this.url}`, data)
            .map(res => {
                return new [MODULE]Entity(res.json());
            });
    }

    Update(data: [MODULE]Entity): Observable<any> {
        return this.Http.put(`${this.url}/${data.Id}`, data)
            .map(res => {
                return new [MODULE]Entity(res.json());
            });
    }

    Delete(data: [MODULE]Entity): Observable<any> {
        return this.Http.delete(`${this.url}/${data.Id}`)
            .catch(e => Observable.throw(e));
    }
	[OBJECTPROPERTIES]
//		Get[ITEM.TYPE]([MODULE]Id: string) {
//			return this.Http.get(`${this.url}/${[MODULE]Id}/[ITEM.TYPE]`)
//				.map(res => {
//					return new [ITEM.TYPE]Entity(res.json());
//				});
//		}
//		Add[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.post(`${this.url}/${[MODULE]Id}/[ITEM.TYPE]/${[ITEM.TYPE]Id}`, {});
//		}
//		Update[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.put(`${this.url}/${[MODULE]Id}/[ITEM.TYPE]/${[ITEM.TYPE]Id}`, {});
//		}
//		Delete[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.delete(`${this.url}/${[MODULE]Id}/[ITEM.TYPE]/${[ITEM.TYPE]Id}`);
//		}
	[END]
	[ARRAYPROPERTIES]
//		Get[ITEM.NAME]([MODULE]Id: string) {
//			return this.Http.get(`${this.url}/${[MODULE]Id}/[ITEM.TYPES]`)
//				.map(res => {
//					return res.json().map(e => new [ITEM.TYPE]Entity(e));
//				});
//		}
//		Add[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.post(`${this.url}/${[MODULE]Id}/[ITEM.TYPES]/${[ITEM.TYPE]Id}`, {});
//		}
//		Update[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.put(`${this.url}/${[MODULE]Id}/[ITEM.TYPES]/${[ITEM.TYPE]Id}`, {});
//		}
//		Delete[ITEM.TYPE]([MODULE]Id: string, [ITEM.TYPE]Id: string) {
//			return this.Http.delete(`${this.url}/${[MODULE]Id}/[ITEM.TYPES]/${[ITEM.TYPE]Id}`);
//		}
	[END]
    
}